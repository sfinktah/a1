package model;


import com.sun.istack.internal.NotNull;
import model.interfaces.BlackEngine;
import model.interfaces.Player;

import java.util.Objects;


public class SimplePerson implements Player {
   // A singular instance of all players, which would be much more useful if the Player interface
   // implemented a static factory method instead of a constructor.
   //
   // See Effective Java (3rd ed):
   //        Item 1: Consider static factory methods instead of constructors
   private int points;
   private String playerName;
   private final String playerId;
   private int bet;
   private int result;

   /*
    * <pre>Assignment interface for FP representing the player
    * to be implemented by SimplePerson class with the following constructor:
    * 	  public SimplePerson(String id, String playerName, int initialPoints)
    *
    * NOTE: player id is unique and if another player with same id is added it replaces the previous player
    */

   public SimplePerson(@NotNull String playerId, @NotNull String playerName, int initialPoints) {
      assert initialPoints >= 0;
      this.playerId = playerId;
      setPersonName(playerName);
      setPoints(initialPoints);
   }

   /**
    * @return human readable player name
    */
   @Override
   public String getPersonName() {
      return playerName;
   }

   /**
    * @param playerName - human readable player name
    */
   @Override
   public void setPersonName(String playerName) {
      this.playerName = playerName;
   }

   /**
    * @return number of points from setPoints()
    */
   @Override
   public int getPoints() {
      return points;
   }

   /**
    * <pre>
    * @param points - for betting
    *    NOTE: (updated by {@link BlackEngine#applyWinLoss(Player, int)} with each win or loss)
    *  </pre>
    */
   @Override
   public void setPoints(int points) {
      this.points = points;
   }

   /**
    * @return the player ID which is generated by the implementing class
    */
   @Override
   public String getPersonId() {
      return playerId;
   }

   /**
    * <b>NOTE:</b> must use resetBet() for 0 bet since not valid for this method
    *
    * @param bet - the bet in points
    *
    * @return true if bet is greater than 0 and player has sufficient points to place the bet<br>
    */
   @Override
   public boolean setBet(int bet) {
      if (bet >= 0 && getPoints() >= bet) {
         // bet should be set to 0 by default constructor or resetBet()
         this.bet = bet;
         return true;
      }
      return false;
   }

   /**
    * @return the bet as set with setBet()
    */
   @Override
   public int getBet() {
      return bet;
   }

   /**
    * reset the bet to 0 for next round (in case player does not bet again in next round)
    */
   @Override
   public void resetBet() {
      bet = 0;
   }

   /**
    * @return the result of the most recent hand as set by {@link Player#setResult(int)}
    */
   @Override
   public int getResult() {
      return result;
   }

   /**
    * <pre>
    * @param result
    *            the result of the most recent hand (updated from the BlackEngine via {@link BlackEngine#dealPerson(Player, int)})
    * </pre>
    */
   @Override
   public void setResult(int result) {
      this.result = result;
   }

   /**
    * @param player - another player to compare with
    *
    * @return true - if the player id is equal
    */
   @Override
   public boolean equals(Player player) {
      return super.equals(player);
   }

   /**
    * <pre>Used to compare order based on player id ascending for {@literal <}, {@literal >} or equality
    * See API docs of java.lang.Comparable{@literal <}T{@literal >} for details</pre>
    *
    * @param player - another player to compare with
    *
    * @return int - 0 if equal
    *
    * @throws java.lang.NullPointerException if player is null
    */
   @Override
   public int compareTo(Player player) {
      // Note that null is not an instance of any class, and e.compareTo(null) should throw a NullPointerException
      Objects.requireNonNull(player);

      int a = stringAsInt(this.getPersonId(), -1);
      int b = stringAsInt(player.getPersonId(), -1);

      return Integer.compare(a, b);
   }

   @Override
   public boolean equals(Object o) {
      return super.equals(o);
   }

   @Override
   public int hashCode() {
      return super.hashCode();
   }

   /**
    * <pre>@return
    *          a human readable String that lists the values of this Player
    *          including their last result
    *
    *          e.g. "Player: id=1, name=The Shark, bet=100, points=900, RESULT .. 38"
    *          (see OutputTrace.pdf)
    * </pre>
    */
   @Override
   public String toString() {
      return String.format("Player: id=\"%s\", name=\"%s\", bet=%d, points=%d, RESULT .. %d", getPersonId(), getPersonName(), getBet(), getPoints(), getResult());
   }

   /**
    * Integer.parseInt with fallback to default value on exception
    *
    * @param text         string containing int
    * @param defaultValue default int
    *
    * @return int
    */
   private static int stringAsInt(Object text, int defaultValue) {
      try {
         return Integer.parseInt(text == null ? "" : String.valueOf(text));
      } catch (NumberFormatException ignored) {
      }
      return defaultValue;
   }
}
